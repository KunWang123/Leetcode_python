'''
题目：
给定一根长度为n的绳子，请把绳子剪成m段（m，n都是整数，n>1,m>1），
每段绳子记为k[0],k[1]……k[m]。请问k[0]*k[1]……*k[m]可能的最大乘积是多少？
例如：当绳子长度为8时，我们把它剪成长度分别为2,3,3段，此时最大乘积为18.
'''




def solution1(length):
    '''
    使用动态规划，从下往上递归
    :param length: 输入的数字
    :return:乘积
    '''
    if length < 2:
        return 0
    if length == 2:
        return 1
    if length == 3:
        return 2
    product = [0] * (length + 1)
    product[0] = 0
    product[1] = 1
    product[2] = 2
    product[3] = 3
    for i in range(4, length+1):
        max_val = 0
        for j in range(1, i//2 + 1):
            tmp = product[j] * product[i - j]
            if max_val < tmp:
                max_val = tmp
            product[i] = max_val
    max_val = product[length]
    # print(product)
    return max_val

def solution2(length):
    if length < 2:
        return 0
    if length == 2:
        return 1
    if length == 3:
        return 2
    # 尽可能多的去剪长度为3的绳子段
    timesOf3 = length // 3
    # 当剩下的长度为4的时候，不能再去剪长度为3的绳子段
    if length - timesOf3 * 3 == 1:
        timesOf3 -= 1
    timesOf2 = (length - timesOf3 *3) / 2
    return int(3**timesOf3 * 2**timesOf2)


if __name__ == '__main__':
    number = 8
    print(solution1(number))
    print(solution2(number))
