题目描述：
地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，
但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。
但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？

解题思路：
利用回溯法，从(0,0)开始依次访问，并记录访问过的位置，访问位置(i,j)时，判断其上下左右，是否有满足条件的位置，
如果有，则计数，继续进行；如果没有则返回上一个位置，继续访问上下左右

python

# -*- coding:utf-8 -*-
class Solution:
    def movingCount(self, threshold, rows, cols):
        # write code here
        if threshold < 0 or rows < 0 or cols < 0:
            return 0
        list_visited = [False] * (rows * cols)
        count_num = self.moving(threshold, rows, cols, 0, 0, list_visited)
        return count_num

    def moving(self, threshold, rows, cols, row, col, list_visited):
        count_num = 0
        if self.check(threshold, rows, cols, row, col, list_visited):
            list_visited[row * cols + col] = True
            count_num = 1 + self.moving(threshold, rows, cols, row - 1, col, list_visited) \
                        + self.moving(threshold, rows, cols, row, col - 1, list_visited) \
                        + self.moving(threshold, rows, cols, row + 1, col, list_visited) \
                        + self.moving(threshold, rows, cols, row, col + 1, list_visited)
        return count_num

    def check(self, threshold, rows, cols, row, col, list_visited):
        if 0 <= row < rows and 0 <= col < cols and \
                self.GetDigitSum(row) + self.GetDigitSum(col) <= threshold \
                and not list_visited[row * cols + col]:
            return True
        return False

    def GetDigitSum(self, number):
        sum_val = 0
        while number > 0:
            sum_val += number % 10  # 需要注意求解数位之和的方法
            number = number // 10
        return sum_val
